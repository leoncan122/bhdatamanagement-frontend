import React, { useState, useEffect } from "react";
import Link from "next/link";
import Head from "next/head";
import { useUser, getSession, withPageAuthRequired } from "@auth0/nextjs-auth0";
import styles from "../styles/Home.module.css";
import UserListRow from "../components/UserListRow";
import AddUserModal from "../components/AddUserModal";
import AddClientModal from "../components/CreateClientModal";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Dropbox } from "dropbox";
import DashboardClientCard from "../components/DashboardClientCard";

import Layout from "../components/Layout";


export default function SupervisorDashboard({  }) {
  const { user, error, isLoading } = useUser();
  const [showModal, setShowModal] = useState(false);

  const userName = user && user['https://lanuevatest.herokuapp.com/name']

  const [showCreateClientModal, setShowCreateClientModal] = useState(false);
  const loggedUserRole =
    user && user["https://lanuevatest.herokuapp.com/roles"];
  const userId = user?.sub;
  const [noDataMessage, setNoDataMessage] = useState(false);

  /*   const [liveData,setLiveData]=useState(data) */

  /* console.log("data",data) */

  /* 
  const getUserClients = ()=> {

    if(loggedUserRole !=="Supervisor" && loggedUserRole !=="DES" ){

      const allClients= liveData.filter(client=>client.clienthcwid===userId).sort((a, b) => a.clientfirstname.localeCompare(b.clientfirstname))
      const userClients = allClients.map((client,index)=>{
        console.log("loggedUserRole1",loggedUserRole)
        return (<DashboardClientCard client={client} key={index} loggedUserRole={loggedUserRole}/>)
      })
      return userClients
    } else {
      console.log("loggedUserRole2",loggedUserRole)
      const hasMsaForm=liveData.filter(client=>client.msa_form_id!==null).sort((a, b) => a.clientfirstname.localeCompare(b.clientfirstname))
     const userClients= hasMsaForm.map((client,index)=>{
     return  <DashboardClientCard client={client} key={index} loggedUserRole={loggedUserRole}/>
      })
      return userClients
    }

    
   }
   const searchByClientIdOrClientName = (text) => {
    const result = data.filter(
      (client, index) =>
        client.clientfirstname.toLowerCase().includes(text.toLowerCase()) ||
        client.clientid.toLowerCase().includes(text.toLowerCase())
    );
    setLiveData(result);

    if (result.length <= 0) {
      setNoDataMessage(true);
    } else {
      setNoDataMessage(false);
    }
  };

  const searchByUserId =(userid)=>{
    console.log(userid)
    console.log("data antes",data)
if(userid!=="All"){
    setLiveData(data)
    const result = data.filter((client, index) => client.clienthcwid.toLowerCase()===userid.toLowerCase());
    setLiveData(result);
    if (result.length <= 0) {
      setNoDataMessage(true);
    } else {
      setNoDataMessage(false);
    }
} else {
  setLiveData(data)
  console.log("data despues",data)
}


  
  }


  const notifyMessage = () => {
    toast.success("A new client is being created!", {
      position: toast.POSITION.TOP_CENTER,
    });
  };

  const displayUserList = () => {
   return hcworkers && hcworkers.map((user, index) => {

      return (
        <option className="text-black" value={user.user_id} key={index}>
          {user.name} {user.lastname}
        </option>
      );
    });
  }; */



  return (
    <>
      <ToastContainer autoClose={60000} />
      <Head>
        <title>Supervisor`s Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <main className="">
          <section id="dashboard-client-list">
            <div className="container mx-auto">
              <section className=" py-5">
                <h1 className="font-black py-5 md:px-0 px-5">
                  {userName},
                </h1>
               
              </section>
              
              <h2 className="font-black my-2 md:px-0 px-5">
                What do you want <span className="">to do</span> today?
              </h2>
              <div className="grid md:grid-cols-6 grid-cols-1 mb-2">
                {loggedUserRole === "Supervisor" && (
                  <Link href="/users">
                    <div className="text-center mr-5 rounded bg-black text-white p-5 text-center shadow-xl   mb-2 rounded-xl">
                      <div className="">
                        <button id="myBtn">
                          <div className="flex justify-center">
                           {/*  <img src="/manage-users-icon.svg" alt="" /> */}
                          </div>
                          <p className="my-5 font-bold">
                            MANAGE <br /> USERS
                          </p>
                        </button>
                      </div>{" "}
                    </div>
                  </Link>
                )}

                <Link href="/historicalData">
                    <div className="text-center mr-5 ">
                      <div className="rounded bg-black p-5 text-center shadow-xl mb-2 rounded-xl">
                        <button id="myBtn">
                          <div className="flex justify-center">
                            {/* <img src="/download_historical_data_icon.svg" alt="" width={85}/> */}
                          </div>
                          <p className="my-5 font-bold text-white uppercase">
                            Download <br /> Historical Data
                          </p>
                        </button>
                      </div>{" "}
                    </div>
                  </Link>
                  
              

              
              </div>
            </div>
          </section>
        </main>
      </Layout>

    
    </>
  );
}

/* export const getServerSideProps = withPageAuthRequired(); */

export const getServerSideProps = withPageAuthRequired()
